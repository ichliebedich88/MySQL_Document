1、索引
	什么是索引：相当于一本书的目录，通过目录可以快速找到资源，添加索引是给字段添加，查询方式：
		全表扫描
		根据索引检索（效率较高）
	提高检索效率的最根本原因是缩小了检索范围，但不能随意添加索引，因为索引也是数据库中的对象，也需要数据库维护，是由维护成本的，比		如，表中的数据经常被修改，就不适合添加索引，因为数据一旦被修改索引需要重新排序，进行维护

	什么时候适合添加索引：
	* 数据量庞大（客户需求）
	* 字段很少进行DML操作（因为字段修改，索引也需要维护）
	* 经常出现在where后面（经常根据哪个字段查询？）

	//主键和具有unique约束的字段会自动添加索引，所以根据主键查询效率较高，尽量根据主键查询

	索引作用：
	//查看sql语句的执行计划，type all表示全表扫描
	mysql> explain select * from emp where sal = 3000;
	+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
	| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |
	+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
	|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |
	+----+-------------+-------+------+---------------+------+---------+------+------+-------------+
	1 row in set (0.01 sec)

	//创建索引，底层用B Tree，二叉查找树
	//删除索引，drop index 索引名 on 表名；
	//语法格式：create index 索引名 on 表名(字段名)；
	mysql> create index salindex on emp(sal);
	Query OK, 0 rows affected (0.02 sec)
	Records: 0  Duplicates: 0  Warnings: 0

	mysql> explain select * from emp where sal = 3000;
	+----+-------------+-------+------+---------------+----------+---------+-------+------+-------------+
	| id | select_type | table | type | possible_keys | key      | key_len | ref   | rows | Extra       |
	+----+-------------+-------+------+---------------+----------+---------+-------+------+-------------+
	|  1 | SIMPLE      | emp   | ref  | salindex      | salindex | 9       | const |    2 | Using where |
	+----+-------------+-------+------+---------------+----------+---------+-------+------+-------------+
	1 row in set (0.00 sec)

2、索引实现原理：B + Tree
	没有索引会进行全表扫描，有索引会根据索引查询，索引会自动排序
	通过B+Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的‘物理地址’，最终通过索引检索到数据之后，获取到关键的		物理地址，通过物理地址定位表中的数据，效率是最高的
	select ename from emp where ename = ‘simith’；
	会转换成
	select ename from emp where 物理地址 = 0x34；

3、索引分类：
	单一索引：给单个字段添加索6引
	复合索引：给多个字段联合起来添加索引
	主键索引：主键上会自动添加索引
	唯一索引：有unique约束的字段会自动添加索引

4、索引什么时候失效：
	select * from emp where ename like '%o%';
	会做全表扫描，所以模糊查询的时候第一个通配符使用百分号所以会失效，因为不能根据开始的字母去走索引

5、视图
	什么是视图？
	站在不同角度看数据，同一张表的数据通过不同角度看待
	创建视图/删除视图
	create view myview as select empno,ename from emp;
	drop view myview;
	只有DQL语句才能以视图对象的方式创建出来，可以对视图进行CRUD操作
	mysql> create view myview as select empno,ename from emp;
	Query OK, 0 rows affected (0.01 sec)
	mysql> select * from myview;//面向视图操作
	+-------+--------+
	| empno | ename  |
	+-------+--------+
	|  7369 | SMITH  |
	|  7499 | ALLEN  |
	|  7521 | WARD   |
	|  7566 | JONES  |
	|  7654 | MARTIN |
	|  7698 | BLAKE  |
	|  7782 | CLARK  |
	|  7788 | SCOTT  |
	|  7839 | KING   |
	|  7844 | TURNER |
	|  7876 | ADAMS  |
	|  7900 | JAMES  |
	|  7902 | FORD   |
	|  7934 | MILLER |
	+-------+--------+
	14 rows in set (0.00 sec)
	对视图进行增删改查（CRUD）会影响到原表数据，根据视图影响原表数据的，不是直接操作的原表
	创建视图的语法和复制表的一样就是把table换成view
	但复制表不会影响原表中的数据，创建视图会影响表中数据

	mysql> select * from myview;
	+-------+-----------+--------+
	| empno | job       | ename  |
	+-------+-----------+--------+
	|  7369 | CLERK     | SMITH  |
	|  7499 | SALESMAN  | ALLEN  |
	|  7521 | SALESMAN  | WARD   |
	|  7566 | MANAGER   | JONES  |
	|  7654 | SALESMAN  | MARTIN |
	|  7698 | MANAGER   | BLAKE  |
	|  7782 | MANAGER   | CLARK  |
	|  7788 | ANALYST   | SCOTT  |
	|  7839 | PRESIDENT | KING   |
	|  7844 | SALESMAN  | TURNER |
	|  7876 | CLERK     | ADAMS  |
	|  7900 | CLERK     | JAMES  |
	|  7902 | ANALYST   | FORD   |
	|  7934 | CLERK     | MILLER |
	+-------+-----------+--------+
	14 rows in set (0.00 sec)

	mysql> delete from myview where empno = 7369;
	Query OK, 1 row affected (0.00 sec)

	mysql> select * from myview;
	+-------+-----------+--------+
	| empno | job       | ename  |
	+-------+-----------+--------+
	|  7499 | SALESMAN  | ALLEN  |
	|  7521 | SALESMAN  | WARD   |
	|  7566 | MANAGER   | JONES  |
	|  7654 | SALESMAN  | MARTIN |
	|  7698 | MANAGER   | BLAKE  |
	|  7782 | MANAGER   | CLARK  |
	|  7788 | ANALYST   | SCOTT  |
	|  7839 | PRESIDENT | KING   |
	|  7844 | SALESMAN  | TURNER |
	|  7876 | CLERK     | ADAMS  |
	|  7900 | CLERK     | JAMES  |
	|  7902 | ANALYST   | FORD   |
	|  7934 | CLERK     | MILLER |
	+-------+-----------+--------+
	13 rows in set (0.00 sec)

	mysql> select * from t_emp;
	+-------+--------+-----------+------+------------+---------+---------+--------+
	| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
	+-------+--------+-----------+------+------------+---------+---------+--------+
	|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
	|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
	|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
	|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
	|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
	|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
	|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |
	|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |
	|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
	|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |
	|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |
	|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |
	|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |
	+-------+--------+-----------+------+------------+---------+---------+--------+
	13 rows in set (0.00 sec)

6、视图的作用？
	比如有些字段保密的字段，外包业务，可以隐藏表的实现细节，保密级别较高的系统可能数据库只对外提供相关的视图，java程序员只对视图进	行CRUD，但并不会提高检索效率，实际上还是操作的原表

7、DBA命令：数据库管理员的命令操作
	将数据库中的数据导出:
	在windows的dos命令窗口中执行：mysqldump bjpowernode > C:\bjpowernode.sql -uroot -p888//导出整个数据库
	导出数据库下的某个表：mysqldump bjpowernode emp > C:\emp.sql -uroot -p888
	
	导入数据:
	create database bjpowernode;
	use bjpowernode;
	source C:\Users\84181\Documents\resources\bjpowernode.sql

	







